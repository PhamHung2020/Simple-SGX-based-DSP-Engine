/* Enclave.edl - Top EDL file. */

enclave {
    from "sgx_tsgxssl.edl" import *;
    from "sgx_pthread.edl" import *;
    //from "sgx_tstdc.edl" import sgx_cpuid;

  include "../include/hot_calls.h"
  include "../include/fast_call_enclave.h"
  include "../include/data_types.h"

  trusted {
    public void EcallStartResponder([user_check] FastCallStruct* fastECallData, [user_check] FastCallStruct* fastOCallData, uint16_t callId);

    public void EcallStartResponderWithDecryption([user_check] FastCallStruct* fastECallData, [user_check] FastCallStruct* fastOCallData, uint16_t callId);

    public void EcallStartResponder2([user_check] FastCallStruct* fastECallData1, [user_check] FastCallStruct* fastECallData2, [user_check] FastCallStruct* fastOCallData, uint16_t callId);

    public void EcallStartResponder2WithDecryption([user_check] FastCallStruct* fastECallData1, [user_check] FastCallStruct* fastECallData2, [user_check] FastCallStruct* fastOCallData, uint16_t callId);

    public void EcallStartResponderWithHotCall([user_check] FastCallStruct* fastECallData, [user_check] FastCallStruct* fastOCallData, uint16_t callId, [user_check] HotCall* hotCall);

    public int ecallSum(int a, int b);

    public void testMemCpy();

    public void testMemCpy2([user_check] char* outMem);

    public void testOpenSslOCall();
  };

  untrusted {
    void ocall_print_string([in, string] const char *str);

    void oCallRecordStartTime();

    void oCallRecordEndTime();

  };

};
